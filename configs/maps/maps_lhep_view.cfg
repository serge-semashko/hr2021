[comments]
[end]

[description]
[end]
[parameters]
    LOG=ON
    init_coord=56.75851581075622,37.21783696637258
    init_Ycoord=56.75859, 37.218719
    init_zoom=16
    max_zoom=20
[end]
[init 2gismap]
    <script>
        var mbUrl ='http://tile2.maps.2gis.com/tiles?x={x}&y={y}&z={z}';
        var mymap = L.map('mapid_view').setView([56.75859, 37.218719], #init_zoom#);
        L.tileLayer(mbUrl,
            {
            maxZoom: #max_zoom#,
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
                '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
            id: 'mapbox/streets-v11'
        }).addTo(mymap);
        mymap.on('zoom', function() {
            processZoom(mymap.getZoom());

        });
    </script>

[end]



[end]
[init ymap]
<script>

      osmLayer = L.tileLayer(
  'http://vec{s}.maps.yandex.net/tiles?l=map&v=4.55.2&z={z}&x={x}&y={y}&scale=2&lang=ru_RU', {
    subdomains: ['01', '02', '03', '04'],
    attribution: '<a http="yandex.ru" target="_blank">Яндекс</a>',
    reuseTiles: true,
    updateWhenIdle: false
  }
);


      baseMaps = {"Plan": osmLayer},
      layersControl = new L.Control.Layers(baseMaps),
      mymap = new L.Map('mapid_view', {
          center: new L.LatLng(56.75859, 37.218719),
          crs : L.CRS.EPSG3395,
          zoom: #init_zoom#,
          layers: [osmLayer]
        });
      popup = new L.Popup();

    //mymap.options.crs = L.CRS.EPSG3395;
    mymap.panTo([56.75859, 37.218719]);
    mymap.addControl(layersControl);
        mymap.on('zoom', function() {
            processZoom(mymap.getZoom());

        });
    
</script>
[end]



[init map]
    <script>
        var mbUrl ='https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';
        var mymap = L.map('mapid_view').setView([56.75859, 37.218719], #init_zoom#);
        L.tileLayer(mbUrl,
            {
            maxZoom: #max_zoom#,
            attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
                '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                'Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
            id: 'mapbox/streets-v11'
        }).addTo(mymap);
        mymap.on('zoom', function() {
            processZoom(mymap.getZoom());

        });
    </script>

[end]


[init local osmmap]
<script>
//    osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
osmUrl = 'http://192.168.1.140/tile/{z}/{x}/{y}.png',
      osmAttribution = 'Map data <a target="_blank" href="http://www.openstreetmap.org">OpenStreetMap.org</a>' +
        ' contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
      osmLayer = new L.TileLayer(osmUrl, {
          maxZoom: #max_zoom#,
          attribution: osmAttribution
        }),
      baseMaps = {"OpenStreetMap": osmLayer},
      layersControl = new L.Control.Layers(baseMaps),
      mymap = new L.Map('mapid_view', {
          center: new L.LatLng(#init_coord#),
          zoom: #init_zoom#,
          layers: [osmLayer]
        }),
      popup = new L.Popup();
        mymap.on('zoom', function() {
            processZoom(mymap.getZoom());

        });

</script>
[end]
[init osmmap]
<script>
osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',

      osmAttribution = 'Map data <a target="_blank" href="http://www.openstreetmap.org">OpenStreetMap.org</a>' +
        ' contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>',
      osmLayer = new L.TileLayer(osmUrl, {
          maxZoom: #max_zoom#,
          attribution: osmAttribution
        }),
      baseMaps = {"OpenStreetMap": osmLayer},
      layersControl = new L.Control.Layers(baseMaps),
      mymap = new L.Map('mapid_view', {
          center: new L.LatLng(#init_coord#),
          zoom: #init_zoom#,
          layers: [osmLayer]
        }),
      popup = new L.Popup();
        mymap.on('zoom', function() {
            processZoom(mymap.getZoom());

        });

</script>
[end]





[report]
<style>
    .lhep_obj_popup1 {
        transform: none !important;
        position: absolute;
        top: 60px !important;
        left: 20px !important;
    }
/* css to customize Leaflet default styles  */
.leaflet-popup-content-wrapper {
     background: #e0e0e0;
    color: #234c5e;
    margin:10;
    padding:10;

}

.leaflet-popup-content-wrapper .leaflet-popup-content {
     background: #e0e0e0;
    color: #234c5e;
    margin:10;
    
    padding:10;
}

.leaflet-popup-tip-container {
}
.popupCustom .leaflet-popup-tip,
.popupCustom .leaflet-popup-content-wrapper {
    background: #e0e0e0;
    color: #234c5e;
}
</style>
<style>
.treeHTML {
  line-height: normal;
}
.treeHTML details {
  display: block;
}
.treeHTML div {
  position: relative;
  margin: 0 0 0 .5em;
  padding: 0 0 0 1.2em;
}
.treeHTML div:not(:last-child) { /* необязательно */
  border-left: 1px solid #ccc;
}
.treeHTML div:before { /* необязательно */
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 1.1em;
  height: .5em;
  border-bottom: 1px solid #ccc;
}
.treeHTML div:last-child:before { /* необязательно */
  border-left: 1px solid #ccc;
}
.treeHTML summary { /* стилями можно задать любую форму, например, тот же плюс. Я специально не стала усложнять, чтобы можно было проще разобраться в коде */
  position: absolute;
  top: 0;
  left: 0;
  cursor: pointer;
}
.treeHTML details[open] summary { /* убрать рамку при фокусе */
  outline: none;
}
</style>
<style>
.leaflet-popup-tip-container {
    display: none;
} 
.leaflet-tooltip-top:before,
.leaflet-tooltip-bottom:before,
.leaflet-tooltip-left:before,
.leaflet-tooltip-right:before {
 
    }
.lhep_obj_tooltip {
    position: absolute;
    pointer-events: none;
    background: none /* transparent*/;
    text-shadow: 2px 2px 2px black, 0 0 1em red; /* Параметры тени */
    color: white; /* Белый цвет текста */
    font-size: 1em; /* Размер надписи */
    border: none;
}
.leaflet-tooltip-left.myCSSClass::before {
  border-left-color: cyan;
}
.leaflet-tooltip-right.myCSSClass::before {
  border-right-color: cyan;
}

</style>

    $GET_DATA maps/maps_lhep[get b_types]

    $LOG2 b_types = #btypes# <br>
    $LOG2 m_types = #mtypes# <br>
    $SET_PARAMETERS selbtype=<select disabled id=bld_sel_num class=bld_desc  onchange="redraw_poly()">  #btypes#  </select>
    $SET_PARAMETERS selmtype=<select disabled id=bld_sel_num class=marker_desc  onchange="redraw_marker(this)">  #mtypes#  </select>
    $LOG2 selmtype = #selmtype# <br>
    $LOG2 maps ========================<br>
    $GET_DATA [type tables]
    $LOG2 maps ========================<br>
    $LOG2 type_tables #type_tables#
    $LOG2 maps ========================<br>
    $INCLUDE [search func]

    <div>
        <div id="mapid_view" style="width: 80%; height: 90%;float:left"></div>
        <div id="listid_view" style="width:20%; height:90%; overflow:auto;">
                <div class=searchbox>
                <h3>
                    People search
                </h3>    
                    <input id=srcfio type=text >
                    <div id=srcres>
                        <table id=srctbl>
                        </table>
                    </div>

                    
                </div>


            <div class="treeHTML" style1="position:absolute;top:120;left:10;z-index: 999;"><h3>Objects</h3><h4>
                #type_tables#
            </h4>
            </div>
            
        </div>
    </div> 
    $GET_DATA maps/maps_lhep[get map object types]
    $SET_PARAMETERS map_object_types={#map_object_types#}
    $LOG2 map_opbect_types #map_object_types# <br>
    
    $INCLUDE [js func]
    $INCLUDE maps/maps_lhep[init icon]
    $INCLUDE maps/maps_lhep[init resize]
    $INCLUDE [init local osmmap] ??
    $INCLUDE [init osmmap] ??
    $INCLUDE [init 2gismap]??
    $INCLUDE [init ymap]  
    $INCLUDE [init map]  ??
    $INCLUDE [init roads]
    $INCLUDE [blink proc]


[end]
[blink proc]
<script>
        var blinked = false;
        function procBlink(){
            //return;
            blinked = !blinked;

            for (cbid in roads){
                let obj =  roads[cbid];
                if (obj['o_type']==3) {
                    
                    if (!blinked){
    //                    console.log('blink '+cbid+' '+' '+obj['obj_name']);

                        obj.leaflet_obj.setOpacity(1);

                        continue;
                    };
                    let obj_blinked = $('##blink'+cbid).prop('checked');
                    if (!obj_blinked)  continue;
//                    console.log('blink '+cbid+' '+obj_blinked)
                    obj.leaflet_obj.setOpacity(0);



                    continue;

                }

                if (!blinked){
//                    console.log('blink '+cbid+' '+' '+obj['obj_name']);
//                     debugger;
//                    obj.leaflet_obj.setStyle({stroke:true,fillOpacity:1.0});
                      obj.leaflet_obj.setStyle({stroke:true,color:obj['o_color']});


                    continue;
                };
                let obj_blinked = $('##blink'+cbid).prop('checked');
                if (!obj_blinked)  continue;
//                console.log('blink '+cbid+' '+obj_blinked)
                obj.leaflet_obj.setStyle({stroke:false,color:'##00FFFF'});
            }
                setTimeout(procBlink,400);

        }
        setTimeout(procBlink,200);
</script>
[end]

  


[type tables]
select CONCAT("<div 
      style=\"color:",val2,"\" 
      >",val1, "<details  style=\"font-size: 150%\"><summary></summary><table id=", parm_name, 
        " border=2   > </table> </details></div>") type_tables from params where sort >0 ORDER BY sort, val1;
[end]



[js func]
 <script>
    var doSubmit=function(){return};
$("#srcfio").on("keyup", function(event) {
    var i = event.keyCode;
    if ( i===13 ) {
        let stbl= $('##srctbl')[0];
        //debugger;
        if (typeof stbl  == "undefined" ) return;
        let row=stbl.rows[1]
        if (typeof row  == "undefined" )return;

        let theclick = new CustomEvent("click");
        row.dispatchEvent(theclick) ;
        row.click();
    } else
    {    fillSearch()
    }
});

       function centerObj(b_id){
        console.log
            mymap.setZoom(18);
            obj=roads[b_id+'T'];
            let center='';     
            if (obj.o_type == 3){
                center = obj.leaflet_obj.getLatLng();
            } else {
                center = obj.leaflet_obj.getCenter();
            }
            redmarker.setLatLng(center).addTo(mymap);
            mymap.setView(center,18,{paddingTopLeft:[200,200]});
            mymap.setView(center,18,{paddingTopLeft:[100,100]});

            
//           $('##blink'+b_id+'T').prop('checked',true);
//            setTimeout(stopBlink,10000,'blink'+b_id+'T');
//           setTimeout(center2,400,center);
       }
       function stopBlink(blink_id){
        $('##'+blink_id).prop('checked',false);
       }
       function center2(center){
          mymap.panTo(center);
       }



        function centerMap(el){
            id=el.id.replace('blink','');
            obj=roads[id];
            let center='';     
            if ((3==obj.o_type)|(4==obj.o_type) ){
                center = obj.leaflet_obj.getLatLng();
            } else {
                center = obj.leaflet_obj.getCenter();
            }
            mymap.panTo(center);
            console.log(this+' '+el+' '+id+' '+obj);
        }
        var lastZoom;
        var Zoom_tooltipThreshold     = 16;
        var Zoom_objectThreshold     = 15;
        function processZoom(zoom){
            $('##zoomval').html('Zoom='+mymap.getZoom());

            for (a in roads) {
                var obj=roads[a];
                var lobj=obj['leaflet_obj'];
                console.log('zoom='+zoom)
                if ( ( obj['o_type']==2 )|( obj['o_type']==1) | ( obj['o_type']==3  ) | ( obj['o_type']==4  ) ){
                   if (zoom<Zoom_objectThreshold)
                    {   lobj.remove();
                        } else 
                    {   lobj.addTo(mymap)}
                } 
            if (mymap.getZoom() < Zoom_tooltipThreshold) {
                $(".lhep_obj_tooltip").css("display","none")
            } else { 
                $(".lhep_obj_tooltip").css("display","block")
            }

                lastZoom = zoom;


            }
            
        }
    
    </script>
[end]

[search func]
<script>
  function fillSearch(){
    redmarker.remove();
    let stbl= $('##srctbl')[0];
    $('##srcres').html('');
    srcfio = $('##srcfio').val();
    if (srcfio.trim().length<2) {
        return
    };
    console.log('src='+srcfio);
    
    AjaxCall('srcres', 'c=getsotrlist&srcfio='+srcfio, true);  
  }
</script>
[end]

[init roads]   
    $GET_DATA maps/maps_lhep[get roads]
    $LOG2 <br> ============================!!!!roads!!!!=======================================<br>  #roads# <br>
    $SET_PARAMETERS roads={#roads#}
    $LOG2 ============================roads=======================================#roads#<br> 
    $LOG2 <br>============================end roads======================================= <br>
    

    $BREAK ??!roads

   <br> init roads  <br> 

    <script>
      

        mymap.on('popupopen', function(e) {
         var px = mymap.project(e.target._popup._latlng); // find the pixel location on the map where the popup anchor is
        px.y -= e.target._popup._container.clientHeight/2; // find the height of the popup container, divide by 2, subtract from the Y axis of marker location
        mymap.panTo(mymap.unproject(px),{animate: true}); // pan to new center
    });



     L.control.scale().addTo(mymap);
        
            function newMapObject(obj_name,o_type,map_object_type, coord){
                    AjaxCall('popupCont', 'c=maps/save_map_object&op=new&id=new&map_object_type='+map_object_type+'&o_type='+o_type+'&coord='+coord+'&objname='+obj_name, true);  
            };
        function redraw_marker(sel){
            var obj_id = sel.id.substring(4);
            obj = roads[obj_id];
            var optionSelected = sel.selectedIndex; 
            var b_value = sel.options[optionSelected].value;
            obj['map_object_type'] = b_value;
            map_object_types[b_value]['icon']
            obj.leaflet_obj.setIcon(map_object_types[b_value]['icon']);
            
        }

        function add_object(el,obj){
            
            var road = roads[el];
            var lr=L.layerGroup();
            var rname  =road['obj_name'];
            var shortname = road['shortname'];    
            
//            console.log('el='+el+' road name'+rname);
            var latlngs = JSON.parse(road['points']);
            //debugger;
            var obj_desc = map_object_types[road.map_object_type];
            console.log('Add el='+el+' begin el'+JSON.stringify(road)+' obj_type='+road.map_object_type+' color='+obj_desc.val2);
            if(typeof obj_desc == "undefined"){
                //debugger;
            }
            var obj_color=obj_desc.val2;
            road['o_color'] = '##'+obj_color;
            var polyline ='--';
            if (road['o_type'] == 1) {
                polyline = L.polyline(
                    latlngs
                , {color: '##'+obj_color, weight:4}).addTo(mymap);
                    polyline.setText(road['tooltip'], {repeat: false,center:true,
                                      offset: 10,
                                      attributes: {'font-weight': 'italic',
                                                   'font-size': '12'}});


            };
            if (road['o_type'] == 2) {
                polyline = L.polygon(
                        latlngs
                    , {fillOpacity:1,color:'##'+ obj_color, weight:4}).addTo(mymap);
//                    polyline.bindTooltip(road['tooltip'],
//                       {permanent: true, direction:"center", className: 'lhep_obj_tooltip'}
//                    ).openTooltip()
            }
            if (road['o_type'] == 3) {
                let size_x = +road['size_x'];
                let size_y = +road['size_y'];


                polyline = L.marker(latlngs, {icon: obj_desc['icon']}).addTo(mymap);
                
//                polyline.bindTooltip(road['tooltip'],
//                       { direction:"center", className: 'lhep_obj_tooltip'}
//                    ).openTooltip()

                if (size_x * size_x>0){
                    let icon = polyline.options.icon;
                    icon.options.iconSize = [size_x, size_y];
                    icon.options.iconAnchor = [parseInt(size_x/2), size_y];

                    polyline.setIcon(icon);
                }
            }
            if (road['o_type'] == 4) {
                let size_x = +road['size_x'];
                let size_y = +road['size_y'];
                let radius = latlngs.pop();
                polyline = L.circle(latlngs, {fillOpacity:1,color:'##'+ obj_color,radius: radius}).addTo(mymap);
//                    polyline.bindTooltip(shortname,
//                       {permanent: true, direction:"center", className: 'lhep_obj_tooltip'}
//                    ).openTooltip()

            }


            if (road['show_tt'] == 0){
                    polyline.bindTooltip(road['tooltip'],
                       {permanent: true, direction:"center", className: 'lhep_obj_tooltip'}
                    ).openTooltip()
            }
//            if (road['show_tt'] == 1){
//                    polyline.bindTooltip(road['tooltip'],
//                       { direction:"center", className: 'lhep_obj_tooltip'}
//                    );
//            }

 

            polyline.bindPopup(road['descr'],{autoPanPaddingTopLeft:[50,50], className: 'lhep_obj_popup'}).on;
            road['_leaflet_id'] = polyline._leaflet_id;
            road['leaflet_obj'] = polyline;
            tbl = $('##'+road['map_object_type'])[0];

            if (road['map_object_type']=='m_cluster'){
                tbl = $('##b_NICA')[0];
            }


            console.log('##'+road['map_object_type']+' '+tbl);
            if(typeof tbl == "undefined") return;
            
            var row=tbl.insertRow( -1);
            var c1 = row.insertCell();
            showname = '';
            
            if (road['o_type'] ==1 ){
                showname = road['obj_name'];
            }
            if (road['o_type'] ==2 ){
                showname = road['shortname'];
            }
            if (road['o_type'] ==4 ){
                showname = road['shortname'];
            }
            if (road['o_type'] ==3 ){
                showname = road['shortname'];
                iconUrl = polyline.options.icon.options.iconUrl;
//                if (road['map_object_type']=='m_transport')
                {
                    showname = '<img src="'+iconUrl+'" width="10" height="15">'+showname;
                }
                
            }
            c1.innerHTML = '<label><input type="checkbox" idobj='+el+' id=blink'+el+ ' onclick="centerMap(this)">'+showname +'</input></label>';

            polyline.on(
                 'click',
                 function(e) {
                   L.DomEvent.stopPropagation(e);
                 });
        }
//==============================
        var tbl_bld= $('##table_bld_view')[0];
        var tbl_roads= $('##table_roads_view')[0];
        var tbl_markers= $('##table_markers_view')[0];

        var editing_id = '--';
        var selbtype ='#selbtype#';
        var selmtype ='#selmtype#';
        var roads = #roads#;
        console.log(2,'============JS ROADS <br> '+JSON.stringify(roads));
        var overlays = {};

        var ovrls = [{},{},{}];

        for (el in roads) {
            if (el.length==0)   break;
            console.log('===================== el = '+el);
            var road = roads[el];
//            console.log(el+' = '+JSON.stringify(road));
            add_object(el, road);

        }
        var redmarker =  L.marker([#init_coord#], {icon: map_object_types['m_redmark']['icon']});
                

        

    </script>
    
[end]


